name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to release'
        required: true
        default: 'v1.0.0'

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      actions: read
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Extract version from tag
        id: extract_version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            TAG="${{ github.event.inputs.tag }}"
          else
            TAG=${GITHUB_REF#refs/tags/}
          fi
          VERSION=${TAG#v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag=$TAG" >> $GITHUB_OUTPUT

      - name: Update TOC version
        run: |
          sed -i "s/^## Version:.*/## Version: ${{ steps.extract_version.outputs.version }}/" CheckPvPAssistant.toc

      - name: Get Interface Version
        id: interface_version
        run: |
          INTERFACE=$(grep "^## Interface:" CheckPvPAssistant.toc | cut -d: -f2 | tr -d ' ' | cut -d, -f1)
          echo "interface=$INTERFACE" >> $GITHUB_OUTPUT

      - name: Create package
        id: package
        run: |
          # Create release directory
          mkdir -p release/CheckPvPAssistant
          
          # Copy addon files (exclude development files)
          cp CheckPvPAssistant.toc release/CheckPvPAssistant/
          cp -r src/ release/CheckPvPAssistant/
          
          # Create archive
          cd release
          zip -r ../CheckPvPAssistant-${{ steps.extract_version.outputs.version }}.zip CheckPvPAssistant/
          cd ..
          
          # Generate file hash
          SHA256=$(sha256sum CheckPvPAssistant-${{ steps.extract_version.outputs.version }}.zip | cut -d' ' -f1)
          echo "sha256=$SHA256" >> $GITHUB_OUTPUT
          echo "filename=CheckPvPAssistant-${{ steps.extract_version.outputs.version }}.zip" >> $GITHUB_OUTPUT

      - name: Extract changelog
        id: changelog
        run: |
          # Extract the latest version's changelog
          awk '/^## \[1\.0\.0\]/,/^## \[/{if(/^## \[/ && !/^## \[1\.0\.0\]/) exit; if(!/^## \[1\.0\.0\]/) print}' CHANGELOG.md > current_changelog.md
          
          # If still empty, provide a default message
          if [ ! -s current_changelog.md ]; then
            echo "Release ${{ steps.extract_version.outputs.version }}" > current_changelog.md
            echo "" >> current_changelog.md
            echo "### Added" >> current_changelog.md
            echo "- Initial release of CheckPvPAssistant addon" >> current_changelog.md
          fi

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.extract_version.outputs.tag }}
          name: CheckPvPAssistant ${{ steps.extract_version.outputs.version }}
          body_path: current_changelog.md
          draft: false
          prerelease: false
          files: CheckPvPAssistant-${{ steps.extract_version.outputs.version }}.zip
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Publish to CurseForge
        uses: itsmeow/curseforge-upload@v3
        if: false  # Disabled until secrets are configured
        env:
          CURSEFORGE_TOKEN: ${{ secrets.CURSEFORGE_TOKEN }}
          CURSEFORGE_PROJECT_ID: ${{ secrets.CURSEFORGE_PROJECT_ID }}
        with:
          token: ${{ secrets.CURSEFORGE_TOKEN }}
          project_id: ${{ secrets.CURSEFORGE_PROJECT_ID }}
          game_endpoint: world-of-warcraft
          file_path: CheckPvPAssistant-${{ steps.extract_version.outputs.version }}.zip
          changelog: |
            $(cat current_changelog.md)
          display_name: CheckPvPAssistant ${{ steps.extract_version.outputs.version }}
          game_versions: ${{ steps.interface_version.outputs.interface }}
          release_type: release

      - name: Publish to Wago
        if: false  # Disabled until secrets are configured
        env:
          WAGO_API_TOKEN: ${{ secrets.WAGO_API_TOKEN }}
          WAGO_PROJECT_ID: ${{ secrets.WAGO_PROJECT_ID }}
        run: |
          curl -X POST "https://addons.wago.io/api/projects/${{ secrets.WAGO_PROJECT_ID }}/version" \
            -H "authorization: Bearer ${{ secrets.WAGO_API_TOKEN }}" \
            -H "Content-Type: multipart/form-data" \
            -F "file=@CheckPvPAssistant-${{ steps.extract_version.outputs.version }}.zip" \
            -F "version=${{ steps.extract_version.outputs.version }}" \
            -F "changelog=@current_changelog.md" \
            -F "label=${{ steps.extract_version.outputs.version }}" \
            -F "stability=stable"

      - name: Create WowUp metadata
        run: |
          cat > wowup.json << EOF
          {
            "name": "CheckPvPAssistant",
            "version": "${{ steps.extract_version.outputs.version }}",
            "download_url": "https://github.com/${{ github.repository }}/releases/download/${{ steps.extract_version.outputs.tag }}/CheckPvPAssistant-${{ steps.extract_version.outputs.version }}.zip",
            "interface": "${{ steps.interface_version.outputs.interface }}",
            "hash": "${{ steps.package.outputs.sha256 }}",
            "changelog_url": "https://github.com/${{ github.repository }}/blob/main/CHANGELOG.md"
          }
          EOF
          
          # Upload metadata for WowUp (you can host this on GitHub Pages or your own server)
          echo "WowUp metadata created: wowup.json"

      - name: Update package metadata
        run: |
          # Create/update package.json for npm-style versioning if needed
          cat > package.json << EOF
          {
            "name": "checkpvpassistant",
            "version": "${{ steps.extract_version.outputs.version }}",
            "description": "World of Warcraft addon for Check-PvP.fr integration",
            "author": "Kirom",
            "license": "MIT",
            "repository": {
              "type": "git",
              "url": "https://github.com/${{ github.repository }}.git"
            }
          }
          EOF

      - name: Summary
        run: |
          echo "## Release Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Version**: ${{ steps.extract_version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **File**: ${{ steps.package.outputs.filename }}" >> $GITHUB_STEP_SUMMARY
          echo "- **SHA256**: ${{ steps.package.outputs.sha256 }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Interface**: ${{ steps.interface_version.outputs.interface }}" >> $GITHUB_STEP_SUMMARY
          echo "- **GitHub Release**: [View Release](https://github.com/${{ github.repository }}/releases/tag/${{ steps.extract_version.outputs.tag }})" >> $GITHUB_STEP_SUMMARY
          echo "- **CurseForge**: $([ -n '${{ secrets.CURSEFORGE_TOKEN }}' ] && echo 'Published âœ…' || echo 'Skipped (no token)')" >> $GITHUB_STEP_SUMMARY
          echo "- **Wago**: $([ -n '${{ secrets.WAGO_API_TOKEN }}' ] && echo 'Published âœ…' || echo 'Skipped (no token)')" >> $GITHUB_STEP_SUMMARY
          echo "- **WowUp**: Metadata created ðŸ“‹" >> $GITHUB_STEP_SUMMARY 